# Schema-Enabled Configuration Example
# Demonstrates how to record with schema metadata

[zenoh]
mode = "peer"

[zenoh.connect]
endpoints = [
    "tcp/localhost:7447"
]

[storage]
backend = "filesystem"

[storage.filesystem]
base_path = "${DATA_PATH:-/data/recordings}"
file_format = "mcap"

[recorder]
device_id = "${DEVICE_ID:-robot-001}"

[recorder.flush_policy]
max_buffer_size_bytes = 10485760  # 10 MB
max_buffer_duration_seconds = 10
min_samples_per_flush = 10

[recorder.compression]
default_type = "zstd"
default_level = 2

[recorder.workers]
flush_workers = 4
queue_capacity = 1000

# Schema configuration - NEW!
[recorder.schema]
# Default format for all topics (if metadata is enabled)
default_format = "raw"  # "raw", "protobuf", "json", "msgpack", etc.

# Enable schema metadata in recordings
include_metadata = true

# Per-topic schema information
[recorder.schema.per_topic."/camera/image"]
format = "protobuf"
schema_name = "sensor_msgs.Image"
schema_hash = "a1b2c3d4"  # Optional: schema version hash

[recorder.schema.per_topic."/lidar/points"]
format = "protobuf"
schema_name = "sensor_msgs.PointCloud2"

[recorder.schema.per_topic."/imu/data"]
format = "json"
schema_name = "sensor_msgs.Imu"

[recorder.schema.per_topic."/telemetry/**"]
format = "json"

[recorder.control]
key_prefix = "recorder/control"
status_key = "recorder/status/**"
timeout_seconds = 30

[logging]
level = "info"
format = "text"

